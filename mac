save_reg macro
	push ax
	push bx
	push cx
	push dx
	push si
	push di
endm

load_reg macro
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax
endm

printw macro n,string
	local stacking,printing
	save_reg
	mov ax,n
	mov bx,10d
	xor cx,cx
stacking:
	xor dx,dx
	div bx
	inc cx
	or dx,30h
	push dx
	or ax,ax
	jne stacking
	
	lea di,string
	
printing:
	pop ax
	mov [di],al
	inc di
	loop printing
	mov [di],'$'
	load_reg
endm

scanw macro string,n
	local scanning,donescan
	save_reg
	mov si,0
	xor bx,bx
	
scanning:
	cmp string[si],'$'
	je donescan
	xor dx,dx
	mov cx,10
	mov ax,bx
	mul cx
	mov dl,string[si]
	xor dh,dh
	and dl,0fh
	add ax,dx
	mov bx,ax  
	inc si
	jmp scanning
donescan:

	mov n,bx
	load_reg
endm